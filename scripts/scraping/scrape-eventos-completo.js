#!/usr/bin/env node

/**
 * Scraper Completo para Eventos
 * - M√∫ltiplas fontes (Sympla, Eventbrite, sites regionais)
 * - Captura de imagens
 * - Foco em eventos regionais (Ji-Paran√°/RO)
 */

const chalk = require('chalk');
const puppeteer = require('puppeteer');
const path = require('path');
const readline = require('readline');

// Carregar configura√ß√µes do .env.local no diret√≥rio do script
require('dotenv').config({ path: path.join(__dirname, '.env.local') });

const { createClient } = require('@supabase/supabase-js');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

class EventoScraperCompleto {
  constructor(supabase, userId) {
    this.supabase = supabase;
    this.userId = userId;
    this.browser = null;
    this.totalSaved = 0;
  }

  async initialize() {
    this.browser = await puppeteer.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
  }

  async cleanup() {
    if (this.browser) {
      await this.browser.close();
    }
  }

  // Obter regi√µes baseado na configura√ß√£o escolhida
  getRegioesConfig(tipoConfig) {
    const rondoniaCompleta = [
      // Rond√¥nia - Principais cidades
      { nome: 'Ji-Paran√°', url: 'https://www.sympla.com.br/eventos/ji-parana-ro', prioridade: 1 },
      { nome: 'Porto Velho', url: 'https://www.sympla.com.br/eventos/porto-velho-ro', prioridade: 1 },
      { nome: 'Ariquemes', url: 'https://www.sympla.com.br/eventos/ariquemes-ro', prioridade: 1 },
      { nome: 'Cacoal', url: 'https://www.sympla.com.br/eventos/cacoal-ro', prioridade: 1 },
      { nome: 'Vilhena', url: 'https://www.sympla.com.br/eventos/vilhena-ro', prioridade: 1 },      
      { nome: 'Rolim de Moura', url: 'https://www.sympla.com.br/eventos/rolim-de-moura-ro', prioridade: 1 },
      { nome: 'Jaru', url: 'https://www.sympla.com.br/eventos/jaru-ro', prioridade: 1 },
      { nome: 'Ouro Preto do Oeste', url: 'https://www.sympla.com.br/eventos/ouro-preto-do-oeste-ro', prioridade: 1 },
      { nome: 'Pimenta Bueno', url: 'https://www.sympla.com.br/eventos/pimenta-bueno-ro', prioridade: 1 },
      { nome: 'Rond√¥nia', url: 'https://www.sympla.com.br/eventos/rondonia', prioridade: 2 }
    ];

    const todasCapitais = [
      { nome: 'S√£o Paulo', url: 'https://www.sympla.com.br/eventos/sao-paulo-sp', prioridade: 3 },
      { nome: 'Rio de Janeiro', url: 'https://www.sympla.com.br/eventos/rio-de-janeiro-rj', prioridade: 3 },
      { nome: 'Bras√≠lia', url: 'https://www.sympla.com.br/eventos/brasilia-df', prioridade: 3 },
      { nome: 'Salvador', url: 'https://www.sympla.com.br/eventos/salvador-ba', prioridade: 3 },
      { nome: 'Fortaleza', url: 'https://www.sympla.com.br/eventos/fortaleza-ce', prioridade: 3 },
      { nome: 'Belo Horizonte', url: 'https://www.sympla.com.br/eventos/belo-horizonte-mg', prioridade: 3 },
      { nome: 'Manaus', url: 'https://www.sympla.com.br/eventos/manaus-am', prioridade: 3 },
      { nome: 'Curitiba', url: 'https://www.sympla.com.br/eventos/curitiba-pr', prioridade: 3 },
      { nome: 'Recife', url: 'https://www.sympla.com.br/eventos/recife-pe', prioridade: 3 },
      { nome: 'Goi√¢nia', url: 'https://www.sympla.com.br/eventos/goiania-go', prioridade: 3 },
      { nome: 'Bel√©m', url: 'https://www.sympla.com.br/eventos/belem-pa', prioridade: 3 },
      { nome: 'Porto Alegre', url: 'https://www.sympla.com.br/eventos/porto-alegre-rs', prioridade: 3 },
      { nome: 'S√£o Lu√≠s', url: 'https://www.sympla.com.br/eventos/sao-luis-ma', prioridade: 4 },
      { nome: 'Macei√≥', url: 'https://www.sympla.com.br/eventos/maceio-al', prioridade: 4 },
      { nome: 'Natal', url: 'https://www.sympla.com.br/eventos/natal-rn', prioridade: 4 },
      { nome: 'Teresina', url: 'https://www.sympla.com.br/eventos/teresina-pi', prioridade: 4 },
      { nome: 'Jo√£o Pessoa', url: 'https://www.sympla.com.br/eventos/joao-pessoa-pb', prioridade: 4 },
      { nome: 'Aracaju', url: 'https://www.sympla.com.br/eventos/aracaju-se', prioridade: 4 },
      { nome: 'Cuiab√°', url: 'https://www.sympla.com.br/eventos/cuiaba-mt', prioridade: 4 },
      { nome: 'Campo Grande', url: 'https://www.sympla.com.br/eventos/campo-grande-ms', prioridade: 4 },
      { nome: 'Florian√≥polis', url: 'https://www.sympla.com.br/eventos/florianopolis-sc', prioridade: 4 },
      { nome: 'Vit√≥ria', url: 'https://www.sympla.com.br/eventos/vitoria-es', prioridade: 4 },
      { nome: 'Palmas', url: 'https://www.sympla.com.br/eventos/palmas-to', prioridade: 4 },
      { nome: 'Macap√°', url: 'https://www.sympla.com.br/eventos/macapa-ap', prioridade: 4 },
      { nome: 'Boa Vista', url: 'https://www.sympla.com.br/eventos/boa-vista-rr', prioridade: 4 },
      { nome: 'Rio Branco', url: 'https://www.sympla.com.br/eventos/rio-branco-ac', prioridade: 4 }
    ];

    const capitaisPrincipais = [
      { nome: 'S√£o Paulo', url: 'https://www.sympla.com.br/eventos/sao-paulo-sp', prioridade: 3 },
      { nome: 'Belo Horizonte', url: 'https://www.sympla.com.br/eventos/belo-horizonte-mg', prioridade: 3 },
      { nome: 'Salvador', url: 'https://www.sympla.com.br/eventos/salvador-ba', prioridade: 3 },
      { nome: 'Rio de Janeiro', url: 'https://www.sympla.com.br/eventos/rio-de-janeiro-rj', prioridade: 3 },
      { nome: 'Porto Alegre', url: 'https://www.sympla.com.br/eventos/porto-alegre-rs', prioridade: 3 },
      { nome: 'Bras√≠lia', url: 'https://www.sympla.com.br/eventos/brasilia-df', prioridade: 3 },
      { nome: 'Curitiba', url: 'https://www.sympla.com.br/eventos/curitiba-pr', prioridade: 3 },
      { nome: 'Recife', url: 'https://www.sympla.com.br/eventos/recife-pe', prioridade: 3 },
      { nome: 'Florian√≥polis', url: 'https://www.sympla.com.br/eventos/florianopolis-sc', prioridade: 3 },
      { nome: 'Fortaleza', url: 'https://www.sympla.com.br/eventos/fortaleza-ce', prioridade: 3 },
      { nome: 'Goi√¢nia', url: 'https://www.sympla.com.br/eventos/goiania-go', prioridade: 3 }
    ];

    switch (tipoConfig) {
      case 'rondonia_todas_capitais':
        return [...rondoniaCompleta, ...todasCapitais];
      case 'rondonia_capitais_principais':
        return [...rondoniaCompleta, ...capitaisPrincipais];
      default:
        return rondoniaCompleta;
    }
  }

  // Scraper do Sympla com imagens e regi√µes
  async scrapeSymplaRegional(tipoConfig = 'rondonia') {
    console.log(chalk.yellow('\nüé™ Buscando no Sympla (Regional)...'));
    
    const page = await this.browser.newPage();
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');

    const regioes = this.getRegioesConfig(tipoConfig);

    let eventos = [];

    for (const regiao of regioes) {
      try {
        console.log(chalk.gray(`  Buscando em ${regiao.nome}...`));
        
        await page.goto(regiao.url, { waitUntil: 'networkidle2', timeout: 30000 });
        await page.waitForTimeout(2000);

        const eventosRegiao = await page.evaluate((cidade) => {
          const events = [];
          const elements = document.querySelectorAll('a[href*="/evento/"], .EventCard, .event-card, article, [data-testid="event-card"]');
          
          // Limitar eventos por regi√£o baseado na prioridade
          const maxEvents = cidade.prioridade === 1 ? 12 : cidade.prioridade === 2 ? 8 : cidade.prioridade === 3 ? 6 : 4;
          
          elements.forEach((el, index) => {
            if (index >= maxEvents) return; // Limitar por regi√£o
            
            let title = '';
            let url = '';
            let image = '';
            let description = '';
            let date = '';
            let location = '';
            
            // Extrair t√≠tulo e URL
            if (el.tagName === 'A') {
              title = el.textContent?.trim();
              url = el.href;
            } else {
              const link = el.querySelector('a[href*="/evento/"]') || el.querySelector('a');
              if (link) {
                title = link.textContent?.trim();
                url = link.href;
              }
            }

            // Extrair imagem
            const imgEl = el.querySelector('img');
            if (imgEl && imgEl.src && !imgEl.src.includes('placeholder')) {
              image = imgEl.src;
            }

            // Extrair descri√ß√£o
            const descEl = el.querySelector('.description, .event-description, p, [data-testid="event-description"]');
            if (descEl) {
              description = descEl.textContent?.trim();
            }

            // Extrair data
            const dateEl = el.querySelector('time, .date, .event-date, [data-testid="event-date"]');
            if (dateEl) {
              date = dateEl.textContent?.trim() || dateEl.getAttribute('datetime');
            }

            // Extrair local com mais seletores
            const locationSelectors = [
              '.location', '.event-location', '.venue', 
              '[data-testid="event-location"]', '[data-testid="venue"]',
              '.event-venue', '.venue-info', '.location-info',
              '.event-address', '.address', '.place',
              '.event-place', '.place-info', '.local-info'
            ];
            
            for (const selector of locationSelectors) {
              const locationEl = el.querySelector(selector);
              if (locationEl && locationEl.textContent?.trim()) {
                location = locationEl.textContent.trim();
                break;
              }
            }
            
            // Se n√£o encontrou local espec√≠fico, tentar extrair da descri√ß√£o
            if (!location && description) {
              const localMatch = description.match(/(?:no|em|no\s+local|no\s+espa√ßo|no\s+teatro|no\s+centro|no\s+shopping|no\s+clube|no\s+bar|no\s+pub|no\s+hotel|no\s+restaurante|no\s+arena|no\s+est√°dio|no\s+gin√°sio|no\s+audit√≥rio|no\s+complexo|no\s+espa√ßo|no\s+galp√£o|no\s+rancho|no\s+concha|no\s+academia|no\s+plaza|no\s+mall|no\s+igreja|no\s+cervejaria|no\s+beco|no\s+por√£o|no\s+largo|no\s+hall)\s+([A-Za-z√Ä-√ø0-9\s\-\.]+?)(?:\s*[-‚Äì‚Äî]\s*[A-Za-z√Ä-√ø\s]+,\s*[A-Z]{2}|$)/i);
              if (localMatch && localMatch[1]) {
                location = localMatch[1].trim();
              }
            }

            if (title && url) {
              events.push({
                title,
                url,
                image,
                description,
                date,
                location,
                cidade: cidade.nome,
                prioridade: cidade.prioridade,
                source: 'sympla' // <- Adicionado para garantir o preenchimento correto
              });
            }
          });
          
          return events;
        }, regiao);

        eventos = eventos.concat(eventosRegiao);
        console.log(chalk.blue(`    ${eventosRegiao.length} eventos encontrados`));

      } catch (error) {
        console.log(chalk.red(`    Erro em ${regiao.nome}: ${error.message}`));
      }
    }

    await page.close();
    return eventos;
  }

  // Scraper do Eventbrite com imagens
  // Obter regi√µes Eventbrite baseado na configura√ß√£o escolhida
  getRegioesEventbriteConfig(tipoConfig) {
    const rondoniaCompleta = [
      // Rond√¥nia - Principais cidades (removidas as cidades especificadas)
      { nome: 'Ji-Paran√°', url: 'https://www.eventbrite.com.br/d/brazil--ji-paran%C3%A1/events/' },
      { nome: 'Porto Velho', url: 'https://www.eventbrite.com.br/d/brazil--porto-velho/events/' },
      { nome: 'Ariquemes', url: 'https://www.eventbrite.com.br/d/brazil--ariquemes/events/' },
      { nome: 'Cacoal', url: 'https://www.eventbrite.com.br/d/brazil--cacoal/events/' },
      { nome: 'Vilhena', url: 'https://www.eventbrite.com.br/d/brazil--vilhena/events/' },
      { nome: 'Pimenta Bueno', url: 'https://www.eventbrite.com.br/d/brazil--pimenta-bueno/events/' },
      { nome: 'Rond√¥nia', url: 'https://www.eventbrite.com.br/d/brazil--rond%C3%B4nia/events/' }
    ];

    const todasCapitais = [
      { nome: 'S√£o Paulo', url: 'https://www.eventbrite.com.br/d/brazil--s%C3%A3o-paulo/events/' },
      { nome: 'Rio de Janeiro', url: 'https://www.eventbrite.com.br/d/brazil--rio-de-janeiro/events/' },
      { nome: 'Bras√≠lia', url: 'https://www.eventbrite.com.br/d/brazil--bras%C3%ADlia/events/' },
      { nome: 'Salvador', url: 'https://www.eventbrite.com.br/d/brazil--salvador/events/' },
      { nome: 'Fortaleza', url: 'https://www.eventbrite.com.br/d/brazil--fortaleza/events/' },
      { nome: 'Belo Horizonte', url: 'https://www.eventbrite.com.br/d/brazil--belo-horizonte/events/' },
      { nome: 'Manaus', url: 'https://www.eventbrite.com.br/d/brazil--manaus/events/' },
      { nome: 'Curitiba', url: 'https://www.eventbrite.com.br/d/brazil--curitiba/events/' },
      { nome: 'Recife', url: 'https://www.eventbrite.com.br/d/brazil--recife/events/' },
      { nome: 'Goi√¢nia', url: 'https://www.eventbrite.com.br/d/brazil--goi%C3%A2nia/events/' },
      { nome: 'Bel√©m', url: 'https://www.eventbrite.com.br/d/brazil--bel%C3%A9m/events/' },
      { nome: 'Porto Alegre', url: 'https://www.eventbrite.com.br/d/brazil--porto-alegre/events/' }
    ];

    const capitaisPrincipais = [
      { nome: 'S√£o Paulo', url: 'https://www.eventbrite.com.br/d/brazil--s%C3%A3o-paulo/events/' },
      { nome: 'Belo Horizonte', url: 'https://www.eventbrite.com.br/d/brazil--belo-horizonte/events/' },
      { nome: 'Salvador', url: 'https://www.eventbrite.com.br/d/brazil--salvador/events/' },
      { nome: 'Rio de Janeiro', url: 'https://www.eventbrite.com.br/d/brazil--rio-de-janeiro/events/' },
      { nome: 'Porto Alegre', url: 'https://www.eventbrite.com.br/d/brazil--porto-alegre/events/' },
      { nome: 'Bras√≠lia', url: 'https://www.eventbrite.com.br/d/brazil--bras%C3%ADlia/events/' },
      { nome: 'Curitiba', url: 'https://www.eventbrite.com.br/d/brazil--curitiba/events/' },
      { nome: 'Recife', url: 'https://www.eventbrite.com.br/d/brazil--recife/events/' },
      { nome: 'Florian√≥polis', url: 'https://www.eventbrite.com.br/d/brazil--florian%C3%B3polis/events/' },
      { nome: 'Fortaleza', url: 'https://www.eventbrite.com.br/d/brazil--fortaleza/events/' },
      { nome: 'Goi√¢nia', url: 'https://www.eventbrite.com.br/d/brazil--goi%C3%A2nia/events/' }
    ];

    switch (tipoConfig) {
      case 'rondonia_todas_capitais':
        return [...rondoniaCompleta, ...todasCapitais];
      case 'rondonia_capitais_principais':
        return [...rondoniaCompleta, ...capitaisPrincipais];
      default:
        return rondoniaCompleta;
    }
  }

  async scrapeEventbriteRegional(tipoConfig = 'rondonia') {
    console.log(chalk.yellow('\nüìÖ Buscando no Eventbrite (Regional)...'));
    
    const page = await this.browser.newPage();
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');

    const regioes = this.getRegioesEventbriteConfig(tipoConfig);

    let eventos = [];

    for (const regiao of regioes) {
      try {
        console.log(chalk.gray(`  Buscando em ${regiao.nome}...`));
        
        await page.goto(regiao.url, { waitUntil: 'networkidle2', timeout: 30000 });
        await page.waitForTimeout(3000);

        const eventosRegiao = await page.evaluate((cidade) => {
          const events = [];
          const elements = document.querySelectorAll('article, [data-testid*="event"], .event-card, .search-event-card');
          
          elements.forEach((el, index) => {
            if (index >= 6) return; // Limitar por regi√£o
            
            let title = '';
            let url = '';
            let image = '';
            let description = '';
            let date = '';
            let location = '';
            
            // Extrair t√≠tulo e URL
            const titleSelectors = ['h1', 'h2', 'h3', 'h4', '[data-testid*="title"]', '.event-title', 'a[href*="/e/"]'];
            for (const selector of titleSelectors) {
              const titleEl = el.querySelector(selector);
              if (titleEl && titleEl.textContent.trim()) {
                title = titleEl.textContent.trim();
                if (titleEl.tagName === 'A') {
                  url = titleEl.href;
                }
                break;
              }
            }

            // Extrair URL se n√£o foi encontrada
            if (!url) {
              const linkEl = el.querySelector('a[href*="/e/"]') || el.querySelector('a');
              if (linkEl) {
                url = linkEl.href;
              }
            }

            // Extrair imagem
            const imgEl = el.querySelector('img');
            if (imgEl && imgEl.src && !imgEl.src.includes('placeholder')) {
              image = imgEl.src;
            }

            // Extrair data
            const dateSelectors = ['time', '[data-testid*="date"]', '.event-date', '[datetime]'];
            for (const selector of dateSelectors) {
              const dateEl = el.querySelector(selector);
              if (dateEl) {
                date = dateEl.getAttribute('datetime') || dateEl.textContent.trim();
                break;
              }
            }

            // Extrair localiza√ß√£o com mais seletores
            const locationSelectors = [
              '[data-testid*="location"]', '[data-testid*="venue"]', 
              '.event-location', '.venue', '.location',
              '.event-venue', '.venue-info', '.location-info',
              '.event-address', '.address', '.place',
              '.event-place', '.place-info', '.local-info',
              '[data-testid="event-location"]', '[data-testid="venue"]'
            ];
            
            for (const selector of locationSelectors) {
              const locationEl = el.querySelector(selector);
              if (locationEl && locationEl.textContent.trim()) {
                location = locationEl.textContent.trim();
                break;
              }
            }
            
            // Se n√£o encontrou local espec√≠fico, tentar extrair da descri√ß√£o
            if (!location && description) {
              const localMatch = description.match(/(?:no|em|no\s+local|no\s+espa√ßo|no\s+teatro|no\s+centro|no\s+shopping|no\s+clube|no\s+bar|no\s+pub|no\s+hotel|no\s+restaurante|no\s+arena|no\s+est√°dio|no\s+gin√°sio|no\s+audit√≥rio|no\s+complexo|no\s+espa√ßo|no\s+galp√£o|no\s+rancho|no\s+concha|no\s+academia|no\s+plaza|no\s+mall|no\s+igreja|no\s+cervejaria|no\s+beco|no\s+por√£o|no\s+largo|no\s+hall)\s+([A-Za-z√Ä-√ø0-9\s\-\.]+?)(?:\s*[-‚Äì‚Äî]\s*[A-Za-z√Ä-√ø\s]+,\s*[A-Z]{2}|$)/i);
              if (localMatch && localMatch[1]) {
                location = localMatch[1].trim();
              }
            }
            
            if (title && title.length > 5) {
              events.push({
                title: title, // T√≠tulo bruto, ser√° processado depois
                url: url || 'https://eventbrite.com.br',
                image: image,
                description: description,
                date: date,
                location: location,
                source: 'eventbrite',
                cidade: cidade
              });
            }
          });
          
          return events;
        }, regiao.nome);

        eventos = eventos.concat(eventosRegiao);
        console.log(chalk.blue(`    ${eventosRegiao.length} eventos encontrados`));

      } catch (error) {
        console.log(chalk.red(`    Erro em ${regiao.nome}: ${error.message}`));
      }
    }

    await page.close();
    return eventos;
  }

  // Scraper de sites regionais de Rond√¥nia
  async scrapeEventosRegionaisRO() {
    console.log(chalk.yellow('\nüèòÔ∏è Buscando em sites regionais de RO...'));
    
    const page = await this.browser.newPage();
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');

    const sitesRegionais = [
      { 
        nome: 'Portal Ji-Paran√°', 
        url: 'https://www.google.com/search?q=eventos+ji-parana+rondonia+2025+2026',
        tipo: 'google'
      },
      { 
        nome: 'Facebook Events RO', 
        url: 'https://www.facebook.com/events/search/?q=eventos%20ji%20parana%20rondonia',
        tipo: 'facebook'
      }
    ];

    let eventos = [];

    for (const site of sitesRegionais) {
      try {
        console.log(chalk.gray(`  Buscando em ${site.nome}...`));
        
        await page.goto(site.url, { waitUntil: 'networkidle2', timeout: 30000 });
        await page.waitForTimeout(3000);

        if (site.tipo === 'google') {
          const eventosGoogle = await page.evaluate(() => {
            const events = [];
            const elements = document.querySelectorAll('.g, .tF2Cxc');
            
            elements.forEach((el, index) => {
              if (index >= 5) return;
              
              const titleEl = el.querySelector('h3, .DKV0Md');
              const linkEl = el.querySelector('a');
              const descEl = el.querySelector('.VwiC3b, .s');
              
              if (titleEl && linkEl) {
                const title = titleEl.textContent?.trim();
                if (title && title.toLowerCase().includes('evento')) {
                  events.push({
                    title: title, // T√≠tulo bruto, ser√° processado depois
                    url: linkEl.href,
                    description: descEl?.textContent?.trim() || '',
                    date: null,
                    location: null,
                    source: 'google_regional',
                    cidade: 'Ji-Paran√°'
                  });
                }
              }
            });
            
            return events;
          });

          eventos = eventos.concat(eventosGoogle);
          console.log(chalk.blue(`    ${eventosGoogle.length} eventos encontrados`));
        }

      } catch (error) {
        console.log(chalk.red(`    Erro em ${site.nome}: ${error.message}`));
      }
    }

    await page.close();
    return eventos;
  }

  // Salvar evento na tabela
  async salvarEvento(evento) {
    try {
      // Processar e extrair informa√ß√µes do t√≠tulo
      const infoExtraida = this.extrairInformacoesDoTitulo(evento);
      
      // Se evento √© irrelevante, pular
      if (!infoExtraida) {
        return { action: 'skipped', evento: { title: evento.title, reason: 'irrelevant' } };
      }
      
      let tituloLimpo = infoExtraida.titulo;

      // Verificar duplicatas por m√∫ltiplos crit√©rios
      const { data: existingByUrl } = await this.supabase
        .from('eventos')
        .select('id, titulo')
        .eq('external_url', evento.url)
        .single();

      if (existingByUrl) {
        return { action: 'skipped', evento: existingByUrl, reason: 'duplicate_url' };
      }

      // Verificar duplicata por t√≠tulo similar (85% de similaridade)
      const { data: existingByTitle } = await this.supabase
        .from('eventos')
        .select('id, titulo')
        .ilike('titulo', `%${tituloLimpo.substring(0, 20)}%`);

      if (existingByTitle && existingByTitle.length > 0) {
        for (const existing of existingByTitle) {
          const similarity = this.calcularSimilaridade(tituloLimpo, existing.titulo);
          if (similarity > 0.85) {
            return { action: 'skipped', evento: existing, reason: 'duplicate_title' };
          }
        }
      }

      let dataEvento = this.processarDataEvento(infoExtraida.data || evento.date);
      let horaEvento = infoExtraida.hora || '19:00:00';
      let localEvento = this.construirLocal(infoExtraida.venue, infoExtraida.cidade, evento.location, evento.cidade);

      // Processar local espec√≠fico e cidade/UF separadamente
      const { localEspecifico, cidadeUF } = this.extrairLocalECidade(
        evento.description || `Evento encontrado no ${evento.source}`,
        infoExtraida.venue,
        infoExtraida.cidade,
        evento.location,
        evento.cidade
      );

      // Preparar dados
      const eventoData = {
        titulo: tituloLimpo,
        local: localEspecifico, // Local espec√≠fico do evento (sem cidade/UF)
        data: dataEvento,
        hora: horaEvento,
        cidade: cidadeUF, // Cidade/UF separada
        categoria: this.categorizarEvento(tituloLimpo),
        imagem_url: evento.image || null,
        organizador_id: this.userId,
        comunidade_id: null,
        max_participantes: null,
        source: evento.source,
        external_url: evento.url
      };

      // Salvar
      const { data, error } = await this.supabase
        .from('eventos')
        .insert([eventoData])
        .select()
        .single();

      if (error) {
        throw error;
      }

      return { action: 'created', evento: data };

    } catch (error) {
      throw error;
    }
  }

  // Lista de cidades e estados brasileiros
  getCidadesEstados() {
    return {
      estados: ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO'],
      cidades: [
        // Principais cidades
        'S√£o Paulo', 'Rio de Janeiro', 'Bras√≠lia', 'Salvador', 'Fortaleza', 'Belo Horizonte', 'Manaus', 'Curitiba', 'Recife', 'Goi√¢nia',
        'Bel√©m', 'Porto Alegre', 'Guarulhos', 'Campinas', 'S√£o Lu√≠s', 'S√£o Gon√ßalo', 'Macei√≥', 'Duque de Caxias', 'Natal', 'Teresina',
        // Rond√¥nia
        'Porto Velho', 'Ji-Paran√°', 'Ariquemes', 'Cacoal', 'Vilhena', 'Rolim de Moura', 'Jaru', 'Ouro Preto do Oeste', 'Guajar√°-Mirim',
        // Outras importantes
        'Florian√≥polis', 'Vit√≥ria', 'Jo√£o Pessoa', 'Aracaju', 'Cuiab√°', 'Campo Grande', 'Palmas', 'Macap√°', 'Rio Branco', 'Boa Vista'
      ]
    };
  }

  // Lista de eventos irrelevantes para filtrar
  getEventosIrrelevantes() {
    return [
      // Palavras gen√©ricas que n√£o indicam eventos reais
      'teste', 'test', 'exemplo', 'example', 'placeholder', 'lorem ipsum',
      'evento teste', 'evento exemplo', 'show teste', 'apresenta√ß√£o teste',
      'workshop teste', 'curso teste', 'palestra teste', 'demo',
      
      // Palavras que indicam conte√∫do inadequado
      'adulto', 'adult', '18+', 'xxx', 'porn', 'sexo', 'sexual',
      'apostas', 'betting', 'casino', 'jogos de azar',
      
      // Palavras que indicam eventos muito espec√≠ficos ou irrelevantes
      'reuni√£o administrativa', 'reuni√£o interna', 'reuni√£o de equipe',
      'treinamento interno', 'capacita√ß√£o interna', 'workshop interno',
      'evento corporativo interno', 'reuni√£o de diretoria',
      
      // Palavras que indicam eventos passados ou cancelados
      'cancelado', 'canceled', 'adiado', 'postponed', 'suspenso',
      'encerrado', 'finalizado', 'terminado', 'passado',
      
      // Palavras que indicam eventos muito pequenos ou informais
      'encontro casual', 'reuni√£o informal', 'conversa', 'chat',
      'conversa online', 'meetup casual', 'encontro virtual',
      
      // Palavras que indicam eventos t√©cnicos muito espec√≠ficos
      'bug fix', 'hotfix', 'patch', 'update t√©cnico',
      'manuten√ß√£o', 'maintenance', 'backup', 'restore',
      
      // Palavras que indicam eventos de teste ou desenvolvimento
      'sandbox', 'dev', 'development', 'staging', 'test environment',
      'ambiente de teste', 'ambiente de desenvolvimento',
      
      // Palavras que indicam eventos muito gen√©ricos
      'evento', 'event', 'atividade', 'activity', 'programa√ß√£o',
      'agenda', 'schedule', 'calend√°rio', 'calendar'
    ];
  }

  // Detectar conte√∫do inadequado por imagem ou descri√ß√£o
  isConteudoInadequado(evento) {
    const textoCompleto = `${evento.title} ${evento.description || ''}`.toLowerCase();
    
    const palavrasInadequadas = [
      'fuck', 'shit', 'porno', 'sex', 'nude', 'naked',
      'strip', 'adult', 'xxx', 'erotic', 'sensual',
      'fetish', 'bdsm', 'swing', 'orgia', 'putaria',
      'safadeza', 'tes√£o', 'gostosa', 'gostoso'
    ];
    
    return palavrasInadequadas.some(palavra => textoCompleto.includes(palavra));
  }

  // Detectar se t√≠tulo √© apenas cidade/estado
  isTituloApenasCidade(titulo) {
    const tituloLimpo = titulo.trim().toLowerCase();
    
    // Padr√µes de cidade/estado
    const padroesCidade = [
      /^[a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß\s]+,?\s*[a-z]{2}$/i, // "Bel√©m, PA" ou "S√£o Paulo SP"
      /^[a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß\s]+\/[a-z]{2}$/i,    // "Bel√©m/PA"
      /^[a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß\s]+\s*-\s*[a-z]{2}$/i // "Bel√©m - PA"
    ];
    
    return padroesCidade.some(padrao => padrao.test(tituloLimpo)) || tituloLimpo.length < 5;
  }

  // Extrair t√≠tulo real de eventos com nomes gen√©ricos
  extrairTituloReal(evento) {
    const titulo = evento.title;
    const descricao = evento.description || '';
    const local = evento.location || '';
    
    // Se t√≠tulo √© apenas cidade, tentar extrair da descri√ß√£o
    if (this.isTituloApenasCidade(titulo)) {
      // Procurar por padr√µes de t√≠tulo na descri√ß√£o
      const padroesTitulo = [
        // Padr√£o: linha em mai√∫sculas com mais de 10 caracteres
        /^([A-Z√Å√Ä√Ç√É√â√ä√ç√ì√î√ï√ö√á][A-Z√Å√Ä√Ç√É√â√ä√ç√ì√î√ï√ö√á\s\d]{10,})/m,
        // Padr√£o: "Evento: T√≠tulo" ou "Show: T√≠tulo"
        /(?:evento|show|apresenta[√ßc]√£o|curso|workshop|palestra|festival):\s*([^.\n]{10,})/i,
        // Padr√£o: primeira linha com mais de 15 caracteres
        /^([^.\n]{15,})/m,
        // Padr√£o: texto entre aspas
        /"([^"]{10,})"/,
        // Padr√£o: texto entre par√™nteses
        /\(([^)]{10,})\)/,
        // Padr√£o: texto ap√≥s dois pontos
        /:\s*([^.\n]{10,})/
      ];
      
      for (const padrao of padroesTitulo) {
        const match = descricao.match(padrao);
        if (match && match[1]) {
          const tituloExtraido = match[1].trim();
          if (tituloExtraido.length > 10 && 
              !this.isTituloApenasCidade(tituloExtraido) &&
              !this.isTituloNomePessoa(tituloExtraido)) {
            return tituloExtraido;
          }
        }
      }
      
      // Se n√£o conseguiu extrair da descri√ß√£o, tentar combinar com local
      if (local && local !== titulo) {
        const localLimpo = local.replace(/,\s*[A-Z]{2}$/, ''); // Remove estado
        if (localLimpo && localLimpo !== titulo) {
          return `${titulo} - ${localLimpo}`;
        }
      }
      
      return null; // Descartar se n√£o conseguir extrair t√≠tulo v√°lido
    }
    
    // Se t√≠tulo √© nome de pessoa, tentar extrair contexto
    if (this.isTituloNomePessoa(titulo)) {
      // Procurar por contexto na descri√ß√£o
      const contextoMatch = descricao.match(new RegExp(`(.{10,}?)\\b${titulo}\\b`, 'i'));
      if (contextoMatch && contextoMatch[1]) {
        const contexto = contextoMatch[1].trim();
        if (contexto.length > 5) {
          return `${contexto} COM ${titulo.toUpperCase()}`;
        }
      }
      
      // Se n√£o encontrou contexto, tentar adicionar tipo de evento
      const tiposEvento = ['SHOW', 'APRESENTA√á√ÉO', 'WORKSHOP', 'PALESTRA', 'CURSO'];
      for (const tipo of tiposEvento) {
        if (descricao.toLowerCase().includes(tipo.toLowerCase())) {
          return `${tipo} COM ${titulo.toUpperCase()}`;
        }
      }
      
      // Fallback: adicionar "SHOW" ao nome
      return `SHOW COM ${titulo.toUpperCase()}`;
    }
    
    // Se t√≠tulo √© muito gen√©rico, tentar melhorar
    if (this.isTituloMuitoGenerico(titulo)) {
      // Tentar extrair informa√ß√µes da descri√ß√£o
      const infoExtra = this.extrairInformacoesDaDescricao(descricao);
      if (infoExtra) {
        return `${titulo} - ${infoExtra}`;
      }
    }
    
    return titulo;
  }

  // Detectar se t√≠tulo √© apenas nome de pessoa
  isTituloNomePessoa(titulo) {
    const tituloLimpo = titulo.trim();
    
    // Padr√µes de nome de pessoa
    const padroes = [
      /^[A-Z√Å√Ä√Ç√É√â√ä√ç√ì√î√ï√ö√á][a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß]+\s+[A-Z√Å√Ä√Ç√É√â√ä√ç√ì√î√ï√ö√á][a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß]+$/,
      /^[A-Z]+\s+[A-Z]+$/
    ];
    
    return padroes.some(padrao => padrao.test(tituloLimpo)) && 
           tituloLimpo.length < 30 && 
           !tituloLimpo.includes('SHOW') && 
           !tituloLimpo.includes('EVENTO');
  }

  // Palavras que indicam local
  getPalavrasLocal() {
    return [
      'local', 'espa√ßo', 'teatro', 'est√°dio', 'arena', 'centro',
      'casa', 'clube', 'hotel', 'shopping', 'parque', 'pra√ßa',
      'audit√≥rio', 'gin√°sio', 'quadra', 'sal√£o', 'pavilh√£o'
    ];
  }

  // Separadores que indicam fim do t√≠tulo
  getSeparadores() {
    return ['|', '!', '‚Äì', '‚Äî', ' - ', ' ‚Äì ', ' ‚Äî ', ' / ', '/'];
  }

  // Verificar se evento √© relevante
  isEventoRelevante(titulo) {
    const tituloLower = titulo.toLowerCase();
    const irrelevantes = this.getEventosIrrelevantes();
    
    return !irrelevantes.some(palavra => tituloLower.includes(palavra));
  }

  // Detectar mudan√ßa de caixa ap√≥s ano
  detectarMudancaCaixaAposAno(texto) {
    // Padr√£o: TEXTO 2025PalavraComCaixaMista
    const pattern = /^(.+20\d{2})([A-Z][a-z].*)$/;
    const match = texto.match(pattern);
    
    if (match) {
      return {
        titulo: match[1].trim(),
        resto: match[2].trim()
      };
    }
    
    return null;
  }

  // Detectar mudan√ßa de mai√∫sculas para local
  detectarMudancaParaLocal(texto) {
    // Padr√£o: TEXTO EM MAI√öSCULATexto em caixa mista
    const pattern = /^([A-Z\s\d]+?)([A-Z][a-z].*)$/;
    const match = texto.match(pattern);
    
    if (match) {
      const titulo = match[1].trim();
      const resto = match[2].trim();
      
      // Verificar se o resto parece ser local
      const palavrasLocal = this.getPalavrasLocal();
      const pareceLocal = palavrasLocal.some(palavra => 
        resto.toLowerCase().includes(palavra.toLowerCase())
      );
      
      if (pareceLocal) {
        return {
          titulo: titulo,
          local: resto
        };
      }
    }
    
    return null;
  }

  // Detectar eventos esportivos e aplicar regras espec√≠ficas
  isEventoEsportivo(titulo) {
    const tituloLower = titulo.toLowerCase();
    const palavrasEsportivas = [
      'corrida', 'run', 'marathon', 'maratona', 'caminhada', 'pedalada',
      'ciclismo', 'triathlon', 'nata√ß√£o', 'atletismo', 'cooper'
    ];
    
    return palavrasEsportivas.some(palavra => tituloLower.includes(palavra));
  }

  // Processar t√≠tulos de eventos esportivos
  processarTituloEsportivo(titulo) {
    let tituloProcessado = titulo;
    
    // Padr√£o: evento esportivo com ano seguido de dist√¢ncia e K
    // Ex: "2¬™ PVH CITY HALF MARATHON 2025. 5K" -> "2¬™ PVH CITY HALF MARATHON 2025"
    const padraoAnoK = /^(.+20\d{2})[\.\s]*\d+K.*$/i;
    const matchAnoK = titulo.match(padraoAnoK);
    if (matchAnoK) {
      return matchAnoK[1].trim();
    }
    
    // Padr√£o: evento esportivo terminando com dist√¢ncia e K (sem ano)
    // Ex: "5¬™ CORRIDA E CAMINHADA OUTUBRO ROSA OAB 5K" -> "5¬™ CORRIDA E CAMINHADA OUTUBRO ROSA OAB"
    const padraoK = /^(.+?)\s*\d+K.*$/i;
    const matchK = titulo.match(padraoK);
    if (matchK) {
      const tituloSemK = matchK[1].trim();
      
      // Verificar se n√£o cortou muito (m√≠nimo 15 caracteres para eventos esportivos)
      if (tituloSemK.length >= 15) {
        return tituloSemK;
      }
    }
    
    return tituloProcessado;
  }

  // Aplicar padr√µes de corte identificados nos t√≠tulos
  aplicarPadroesDeCorte(titulo) {
    let tituloProcessado = titulo;

    // 1. Padr√£o: Mudan√ßa de MAI√öSCULAS para Mistas (indica local)
    // Ex: "RESENHA DO ASSISSeu Geraldo Boteco" -> "RESENHA DO ASSIS"
    const padraoMudancaCaixa = /^([A-Z√Å√Ä√Ç√É√â√ä√ç√ì√î√ï√ö√á\s]+?)([A-Z][a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß].*)$/;
    const matchCaixa = titulo.match(padraoMudancaCaixa);
    if (matchCaixa && matchCaixa[1].trim().length >= 10) {
      tituloProcessado = matchCaixa[1].trim();
    }

    // 2. Padr√£o: Palavra "dia" seguida de data
    // Ex: "Baile Fest Car dia 30 de agosto no Piazza Notte" -> "Baile Fest Car"
    const padraoDia = /^(.+?)\s+dia\s+\d{1,2}.*$/i;
    const matchDia = tituloProcessado.match(padraoDia);
    if (matchDia && matchDia[1].trim().length >= 8) {
      tituloProcessado = matchDia[1].trim();
    }

    // 3. Padr√£o: Preposi√ß√£o "com" seguida de complementos
    // Ex: "POSICIONA 360¬∞ com Elas N Sucesso" -> "POSICIONA 360¬∞"
    const padraoCom = /^(.+?)\s+com\s+[A-Z].*$/i;
    const matchCom = tituloProcessado.match(padraoCom);
    if (matchCom && matchCom[1].trim().length >= 10) {
      tituloProcessado = matchCom[1].trim();
    }

    // 4. Padr√£o: Endere√ßos e Locais (expandido com novos locais)
    // Ex: "III JORNADA UNIVERSO DO PSI ESCOLARAv. √Ålvaro Otac√≠lio" -> "III JORNADA UNIVERSO DO PSI ESCOLAR"
    // Ex: "Semin√°rio de Ci√™ncias B√≠blicas em Natal (RN)Igreja do Nazareno" -> "Semin√°rio de Ci√™ncias B√≠blicas em Natal (RN)"
    const padraoEndereco = /^(.+?)(Av\.|Rua|R\.|Alameda|Travessa|Pra√ßa|Igreja|Clube|Est√°dio|Arena|Centro|Gin√°sio|Bar|Teatro|Rodovia|BR|Pub|Universidade|Espa√ßo|Restaurante|Hotel|Beco|Por√£o|Cervejaria|Largo|Hall|Galp√£o|Rancho).*$/i;
    const matchEndereco = tituloProcessado.match(padraoEndereco);
    if (matchEndereco && matchEndereco[1].trim().length >= 10) {
      tituloProcessado = matchEndereco[1].trim();
    }



    // 5. Padr√£o: Ano no final (para eventos n√£o esportivos)
    // Ex: "CORRIDA NOTURNA CACOAL ROTA DA JUSTI√áA 2025OAB" -> "CORRIDA NOTURNA CACOAL ROTA DA JUSTI√áA 2025"
    const padraoAnoFinal = /^(.+20\d{2})[A-Z]{2,}.*$/;
    const matchAnoFinal = tituloProcessado.match(padraoAnoFinal);
    if (matchAnoFinal && matchAnoFinal[1].trim().length >= 15) {
      tituloProcessado = matchAnoFinal[1].trim();
    }

    // 6. Padr√£o: Repeti√ß√£o de local/estabelecimento
    // Ex: "Festival no Piazza NottePiazza Notte" -> "Festival no Piazza Notte"
    const padraoRepeticaoLocal = /^(.+?)([A-Z][a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß\s]+)\1.*$/;
    const matchRepeticaoLocal = tituloProcessado.match(padraoRepeticaoLocal);
    if (matchRepeticaoLocal && matchRepeticaoLocal[1].trim().length >= 10) {
      tituloProcessado = matchRepeticaoLocal[1].trim() + matchRepeticaoLocal[2];
    }

    // 7. Padr√£o: Nome de cidade repetido com data
    // Ex: "Cuiab√° 16/08 POSICIONA 360¬∞ com Elas N SucessoCuiab√° Lar Shopping" -> "POSICIONA 360¬∞"
    const cidades = ['S√£o Paulo', 'Rio de Janeiro', 'Cuiab√°', 'Goi√¢nia', 'Bras√≠lia', 'Salvador', 'Fortaleza'];
    for (const cidade of cidades) {
      const regexCidade = new RegExp(`^${cidade}\\s+\\d{1,2}/\\d{1,2}\\s+(.+?)\\s+com\\s+.*${cidade}.*$`, 'i');
      const matchCidade = tituloProcessado.match(regexCidade);
      if (matchCidade && matchCidade[1].trim().length >= 8) {
        tituloProcessado = matchCidade[1].trim();
        break;
      }
    }

    // 8. NOVO: Padr√£o para detectar partes de local que est√£o sendo inclu√≠das no t√≠tulo
    // Ex: "WARUNG TOUR BELO HORIZONTEBH" -> "WARUNG TOUR BELO HORIZONTE"
    
    // 8.1. Padr√£o: Aus√™ncia de espa√ßo entre palavras (m√∫ltiplas abordagens)
    
    // Abordagem 1: Locais conhecidos sem espa√ßo
    const locaisEspecificos = [
      'Sesi', 'Teatro', 'Bar', 'Pub', 'Hotel', 'Restaurante', 'Clube', 
      'Igreja', 'Centro', 'Espa√ßo', 'Arena', 'Est√°dio', 'Gin√°sio', 
      'Cervejaria', 'Beco', 'Por√£o', 'Largo', 'Hall', 'Galp√£o', 
      'Rancho', 'Concha', 'Hostel', 'Universidade', 'Academia', 'Plaza'
    ];
    
    for (const local of locaisEspecificos) {
      const regex = new RegExp(`^(.+?)${local}.*$`, 'i');
      const match = tituloProcessado.match(regex);
      if (match && match[1].trim().length >= 10) {
        // Verificar se n√£o h√° espa√ßo antes do local
        const ultimaLetra = match[1].slice(-1);
        if (ultimaLetra.match(/[a-zA-Z]/)) {
          tituloProcessado = match[1].trim();
          break;
        }
      }
    }
    
    // Abordagem 2: Repeti√ß√£o de palavras (ex: "esperan√ßaCan√ß√£o Nova")
    const padraoRepeticao = /^(.+?)([A-Z][a-z]+\s[A-Z][a-z]+)$/;
    const matchRepeticao = tituloProcessado.match(padraoRepeticao);
    if (matchRepeticao && matchRepeticao[1].trim().length >= 15) {
      const parteAntes = matchRepeticao[1].trim();
      const parteDepois = matchRepeticao[2].trim();
      
      // Verificar se a parte depois aparece na parte antes
      if (parteAntes.toLowerCase().includes(parteDepois.toLowerCase().split(' ')[0])) {
        tituloProcessado = parteAntes;
      }
    }
    

    
    // Abordagem 3: Mudan√ßa de caixa no meio da palavra (ex: "MesuraMoto") - DEVE VIR DEPOIS dos casos espec√≠ficos
    const padraoMudancaCaixaMeio = /^(.+?)([a-z][A-Z][a-z]+.*)$/;
    const matchMudancaCaixaMeio = tituloProcessado.match(padraoMudancaCaixaMeio);
    if (matchMudancaCaixaMeio && matchMudancaCaixaMeio[1].trim().length >= 10) {
      tituloProcessado = matchMudancaCaixaMeio[1].trim();
    }
    
    // Abordagem 4: Ponto seguido de local (ex: "II SIMP√ìSIO RONDONIENSE DE CIRURGIA BUCOMAXILO.Golden Plaza")
    const padraoPontoLocal = /^(.+?)\.([A-Z][a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß\s]+)$/;
    const matchPontoLocal = tituloProcessado.match(padraoPontoLocal);
    if (matchPontoLocal && matchPontoLocal[1].trim().length >= 10) {
      tituloProcessado = matchPontoLocal[1].trim();
    }
    

    
    // 8.2. Padr√£o: Siglas de estado/cidade no final sem espa√ßo
    const padraoSiglaFinal = /^(.+?)([A-Z]{2,3})\s*$/;
    const matchSiglaFinal = tituloProcessado.match(padraoSiglaFinal);
    if (matchSiglaFinal && matchSiglaFinal[1].trim().length >= 10) {
      const sigla = matchSiglaFinal[2];
      // Verificar se √© uma sigla conhecida de estado/cidade
      if (['BH', 'SP', 'RJ', 'MG', 'RS', 'SC', 'PR', 'BA', 'CE', 'PE', 'GO', 'MT', 'MS', 'PA', 'AM', 'AC', 'RO', 'RR', 'AP', 'TO', 'PI', 'MA', 'RN', 'PB', 'AL', 'SE'].includes(sigla)) {
        tituloProcessado = matchSiglaFinal[1].trim();
      }
    }
    


    // 9. NOVO: Padr√£o para limpar h√≠fens duplos e caracteres estranhos
    // Ex: "REBEL XX com Allan Natal e Ian Padilha- - 02" -> "REBEL XX com Allan Natal e Ian Padilha"
    
    // 9.1. Remover h√≠fens duplos e caracteres estranhos no final
    tituloProcessado = tituloProcessado.replace(/[-‚Äì‚Äî]+\s*[-‚Äì‚Äî]+\s*$/, ''); // Remove h√≠fens duplos no final
    tituloProcessado = tituloProcessado.replace(/[-‚Äì‚Äî]+\s*\d+\s*$/, ''); // Remove h√≠fen + n√∫mero no final
    tituloProcessado = tituloProcessado.replace(/\s+[-‚Äì‚Äî]+\s*$/, ''); // Remove h√≠fen solto no final
    tituloProcessado = tituloProcessado.replace(/[-‚Äì‚Äî]+\s*$/, ''); // Remove qualquer h√≠fen no final
    
    // 9.2. Limpar espa√ßos m√∫ltiplos e espa√ßos no final
    tituloProcessado = tituloProcessado.replace(/\s+/g, ' ').trim();
    
    // 9.3. Limpar caracteres especiais (mas preservar acentos)
    tituloProcessado = tituloProcessado.replace(/[^\w\s\-‚Äì‚Äî~@#$%&*()\[\]{}|\\:;"'<>,.?/√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß√Å√Ä√Ç√É√â√ä√ç√ì√î√ï√ö√á]/g, '');
    
    // 9.4. Limpar espa√ßos novamente ap√≥s remo√ß√£o de caracteres
    tituloProcessado = tituloProcessado.replace(/\s+/g, ' ').trim();

    // 10. NOVO: Padr√£o para detectar quando o local est√° sendo inclu√≠do incorretamente
    // Ex: "Nome do Evento + Nome do Local" -> "Nome do Evento"
    
    // 10.1. Padr√£o: "+" seguido de palavras que parecem local
    const padraoMaisLocal = /^(.+?)\s+\+\s+([A-Z][a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß\s]+)$/;
    const matchMaisLocal = tituloProcessado.match(padraoMaisLocal);
    if (matchMaisLocal && matchMaisLocal[1].trim().length >= 8) {
      const parteEvento = matchMaisLocal[1].trim();
      const parteLocal = matchMaisLocal[2].trim();
      
      // Verificar se a parte ap√≥s "+" parece ser um local
      const palavrasLocalComuns = ['Moto', 'Li', 'Bar', 'Pub', 'Teatro', 'Centro', 'Espa√ßo', 'Arena', 'Clube', 'Restaurante', 'Hotel', 'Municipal'];
      const pareceLocal = palavrasLocalComuns.some(palavra => 
        parteLocal.toLowerCase().includes(palavra.toLowerCase())
      );
      
      if (pareceLocal) {
        tituloProcessado = parteEvento;
      }
    }

    return tituloProcessado;
  }

  // Extrair informa√ß√µes do t√≠tulo (vers√£o inteligente baseada em padr√µes)
  extrairInformacoesDoTitulo(evento) {
    const titulo = evento.title || evento.titulo;
    const original = titulo;
    let tituloLimpo = titulo;
    let data = null;
    let venue = null;
    let cidade = null;
    let hora = '19:00:00';

    // 1. Verificar conte√∫do inadequado
    if (this.isConteudoInadequado(evento)) {
      return null; // Conte√∫do inadequado
    }

    // 2. Verificar se evento tem imagem (obrigat√≥rio)
    if (!evento.image || evento.image.includes('placeholder') || evento.image.includes('default')) {
      return null; // Eventos sem imagem s√£o descartados
    }

    // 3. Verificar relev√¢ncia b√°sica
    if (!this.isEventoRelevante(titulo)) {
      return null; // Evento irrelevante
    }

    // 4. Tentar extrair t√≠tulo real se for gen√©rico
    const tituloReal = this.extrairTituloReal(evento);
    if (!tituloReal) {
      return null; // N√£o conseguiu extrair t√≠tulo v√°lido
    }
    
    tituloLimpo = tituloReal;

    // 5. Processar eventos esportivos primeiro
    if (this.isEventoEsportivo(tituloLimpo)) {
      tituloLimpo = this.processarTituloEsportivo(tituloLimpo);
    }

    // 6. Aplicar novos padr√µes de corte identificados
    tituloLimpo = this.aplicarPadroesDeCorte(tituloLimpo);

    // 7. Detectar separadores expl√≠citos (|, !, ‚Äì)
    const separadores = this.getSeparadores();
    for (const sep of separadores) {
      if (tituloLimpo.includes(sep)) {
        const partes = tituloLimpo.split(sep);
        tituloLimpo = partes[0].trim();
        
        // Extrair data se estiver na segunda parte
        const segundaParte = partes[1]?.trim();
        if (segundaParte && /\d{1,2}\s+\w+/.test(segundaParte)) {
          data = segundaParte.match(/\d{1,2}\s+\w+/)[0];
        }
        break;
      }
    }

    // 8. Detectar mudan√ßa de caixa ap√≥s ano (m√©todo legado)
    const mudancaAno = this.detectarMudancaCaixaAposAno(tituloLimpo);
    if (mudancaAno) {
      tituloLimpo = mudancaAno.titulo;
      venue = mudancaAno.resto;
    }

    // 9. Detectar mudan√ßa de mai√∫sculas para local (m√©todo legado)
    if (!venue) {
      const mudancaLocal = this.detectarMudancaParaLocal(tituloLimpo);
      if (mudancaLocal) {
        tituloLimpo = mudancaLocal.titulo;
        venue = mudancaLocal.local;
      }
    }

    // 10. Detectar padr√£o "em [cidade]"
    if (!cidade) {
      const matchEm = tituloLimpo.match(/^(.+?)\s+em\s+([A-Za-z√Ä-√ø\s\/]+)$/i);
      if (matchEm) {
        tituloLimpo = matchEm[1].trim();
        cidade = matchEm[2].trim();
      }
    }

    // 11. Detectar padr√µes de local espec√≠fico no t√≠tulo
    if (!venue) {
      // Padr√£o: "Evento - Local"
      const matchLocalHifen = tituloLimpo.match(/^(.+?)\s*[-‚Äì‚Äî]\s*([A-Za-z√Ä-√ø0-9\s\-\.]+?)(?:\s*[-‚Äì‚Äî]\s*[A-Za-z√Ä-√ø\s]+,\s*[A-Z]{2}|$)/i);
      if (matchLocalHifen) {
        tituloLimpo = matchLocalHifen[1].trim();
        venue = matchLocalHifen[2].trim();
      }
      
      // Padr√£o: "Evento no Local"
      const matchLocalNo = tituloLimpo.match(/^(.+?)\s+(?:no|na|no\s+local|no\s+espa√ßo|no\s+teatro|no\s+centro|no\s+shopping|no\s+clube|no\s+bar|no\s+pub|no\s+hotel|no\s+restaurante|no\s+arena|no\s+est√°dio|no\s+gin√°sio|no\s+audit√≥rio|no\s+complexo|no\s+espa√ßo|no\s+galp√£o|no\s+rancho|no\s+concha|no\s+academia|no\s+plaza|no\s+mall|no\s+igreja|no\s+cervejaria|no\s+beco|no\s+por√£o|no\s+largo|no\s+hall)\s+([A-Za-z√Ä-√ø0-9\s\-\.]+?)(?:\s*[-‚Äì‚Äî]\s*[A-Za-z√Ä-√ø\s]+,\s*[A-Z]{2}|$)/i);
      if (matchLocalNo) {
        tituloLimpo = matchLocalNo[1].trim();
        venue = matchLocalNo[2].trim();
      }
      
      // Padr√£o: "Evento @ Local"
      const matchLocalArroba = tituloLimpo.match(/^(.+?)\s*@\s*([A-Za-z√Ä-√ø0-9\s\-\.]+?)(?:\s*[-‚Äì‚Äî]\s*[A-Za-z√Ä-√ø\s]+,\s*[A-Z]{2}|$)/i);
      if (matchLocalArroba) {
        tituloLimpo = matchLocalArroba[1].trim();
        venue = matchLocalArroba[2].trim();
      }
    }

    // 12. Detectar "Local a definir" ou similar
    if (!venue) {
      const matchLocal = tituloLimpo.match(/^(.+?)(local\s+.+)$/i);
      if (matchLocal) {
        tituloLimpo = matchLocal[1].trim();
        venue = matchLocal[2].trim();
      }
    }

    // 13. Extrair hora (padr√£o "√†s HH:MM")
    const matchHoraAs = original.match(/√†s\s*(\d{1,2}):(\d{2})/i);
    if (matchHoraAs) {
      hora = `${matchHoraAs[1].padStart(2, '0')}:${matchHoraAs[2]}:00`;
    } else {
      const matchHora = original.match(/(\d{1,2}):(\d{2})/);
      if (matchHora) {
        hora = `${matchHora[1].padStart(2, '0')}:${matchHora[2]}:00`;
      }
    }

    // 14. Extrair data se n√£o foi encontrada
    if (!data) {
      const padroesDatas = [
        /(\d{1,2})\s*de\s*(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/gi,
        /\ba\s*(\d{1,2})\s*de\s*(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/gi
      ];

      for (const padrao of padroesDatas) {
        const match = original.match(padrao);
        if (match) {
          data = match[0].replace(/^a\s*/, '');
          break;
        }
      }
    }

    // 15. Limpeza final do t√≠tulo
    tituloLimpo = tituloLimpo
      .replace(/(domingo|segunda|ter√ßa|quarta|quinta|sexta|s√°bado)/gi, '')
      .replace(/,?\s*√†s?\s*/gi, '')
      .replace(/\s*-\s*$/, '')
      .replace(/\s*,\s*$/, '')
      .replace(/\s+/g, ' ')
      .trim();

    // 16. Valida√ß√£o final do t√≠tulo
    if (tituloLimpo.length < 10) {
      return null; // T√≠tulo muito curto ap√≥s processamento
    }

    return {
      titulo: tituloLimpo,
      data: data,
      hora: hora,
      venue: venue,
      cidade: cidade
    };
  }

  // Extrair local espec√≠fico e cidade/UF separadamente
  extrairLocalECidade(descricao, venue, cidade, locationOriginal, cidadeOriginal) {
    let localEspecifico = '';
    let cidadeUF = '';
    
    // 1. Priorizar venue extra√≠do (mais confi√°vel)
    if (venue && venue.trim()) {
      localEspecifico = venue.trim();
    }
    
    // 2. Se n√£o tem venue, usar locationOriginal
    if (!localEspecifico && locationOriginal) {
      // Verificar se locationOriginal cont√©m cidade/UF
      const { local, cidade: cidadeExtraida } = this.separarLocalECidade(locationOriginal);
      if (cidadeExtraida && !cidadeUF) {
        localEspecifico = local;
        cidadeUF = cidadeExtraida;
      } else {
        localEspecifico = locationOriginal.trim();
      }
    }
    
    // 3. Se ainda n√£o tem, tentar extrair da descri√ß√£o
    if (!localEspecifico && descricao) {
      localEspecifico = this.extrairLocalDaDescricao(descricao);
    }
    
    // 4. Processar cidade/UF
    if (cidade && cidade.trim()) {
      cidadeUF = cidade.trim();
    } else if (cidadeOriginal) {
      cidadeUF = this.determinarCidadeUF(cidadeOriginal);
    } else if (descricao) {
      cidadeUF = this.extrairCidadeDaDescricao(descricao);
    }
    
    // 5. Se localEspecifico ainda cont√©m cidade/UF, separar
    if (localEspecifico && (localEspecifico.includes(',') || localEspecifico.includes(' - '))) {
      const { local, cidade: cidadeExtraida } = this.separarLocalECidade(localEspecifico);
      if (cidadeExtraida && !cidadeUF) {
        localEspecifico = local;
        cidadeUF = cidadeExtraida;
      }
    }
    
    // 6. Fallbacks mais inteligentes
    if (!localEspecifico || localEspecifico === 'Local a definir') {
      // Tentar usar descri√ß√£o como local se n√£o for muito gen√©rica
      if (descricao && descricao.length > 10 && descricao.length < 200) {
        // Usar primeiras palavras da descri√ß√£o como local
        const palavras = descricao.split(/\s+/).slice(0, 6).join(' ');
        localEspecifico = palavras.trim();
      } else if (locationOriginal && locationOriginal !== 'Local a definir') {
        // Usar locationOriginal como fallback
        localEspecifico = locationOriginal.trim();
      } else {
        localEspecifico = 'Local a definir';
      }
    }
    
    if (!cidadeUF || cidadeUF === 'Local n√£o informado') {
      cidadeUF = 'Local n√£o informado';
    }
    
    return { localEspecifico, cidadeUF };
  }

  // Separar local e cidade de uma string que cont√©m ambos
  separarLocalECidade(texto) {
    if (!texto) return { local: '', cidade: '' };
    
    // Padr√µes para separar local e cidade
    const padroes = [
      // "Local - Cidade, UF"
      /^(.+?)\s*[-‚Äì‚Äî]\s*([A-Za-z√Ä-√ø\s]+),\s*([A-Z]{2})$/i,
      // "Local, Cidade, UF"
      /^(.+?),\s*([A-Za-z√Ä-√ø\s]+),\s*([A-Z]{2})$/i,
      // "Local em Cidade, UF"
      /^(.+?)\s+em\s+([A-Za-z√Ä-√ø\s]+),\s*([A-Z]{2})$/i,
      // "Local @ Cidade, UF"
      /^(.+?)\s*@\s*([A-Za-z√Ä-√ø\s]+),\s*([A-Z]{2})$/i
    ];
    
    for (const padrao of padroes) {
      const match = texto.match(padrao);
      if (match && match[1] && match[2] && match[3]) {
        return {
          local: match[1].trim(),
          cidade: `${match[2].trim()}, ${match[3].trim()}`
        };
      }
    }
    
    // Casos especiais que n√£o foram capturados pelos padr√µes
    if (texto.includes(' - ') && texto.includes(',')) {
      const partes = texto.split(' - ');
      if (partes.length >= 2) {
        const ultimaParte = partes[partes.length - 1];
        if (ultimaParte.includes(',')) {
          const local = partes.slice(0, -1).join(' - ').trim();
          const cidade = ultimaParte.trim();
          return { local, cidade };
        }
      }
    }
    
    // Verificar se h√° cidade/UF no final do texto
    const cidadeMatch = texto.match(/([A-Za-z√Ä-√ø\s]+),\s*([A-Z]{2})$/i);
    if (cidadeMatch) {
      const cidade = `${cidadeMatch[1].trim()}, ${cidadeMatch[2].trim()}`;
      const local = texto.replace(cidadeMatch[0], '').trim();
      // Limpar h√≠fens ou v√≠rgulas soltas no final
      const localLimpo = local.replace(/[-‚Äì‚Äî,\s]+$/, '').trim();
      return { local: localLimpo, cidade };
    }
    
    // Se n√£o encontrou padr√£o, retornar o texto como local
    return { local: texto.trim(), cidade: '' };
  }

  // Extrair local espec√≠fico da descri√ß√£o
  extrairLocalDaDescricao(descricao) {
    if (!descricao) return '';
    
    // Se a descri√ß√£o √© muito curta, usar como local
    if (descricao.length < 50) {
      return descricao.trim();
    }
    
    // Padr√µes para encontrar local espec√≠fico (mais simples)
    const padroesLocal = [
      // "no Local"
      /(?:no|em|na)\s+([A-Za-z√Ä-√ø0-9\s\-\.]+?)(?:\s*[-‚Äì‚Äî]\s*[A-Za-z√Ä-√ø\s]+,\s*[A-Z]{2}|$)/gi,
      // "Local:"
      /(?:local|endere√ßo|localiza√ß√£o|venue):\s*([A-Za-z√Ä-√ø0-9\s\-\.]+?)(?:\s*[-‚Äì‚Äî]\s*[A-Za-z√Ä-√ø\s]+,\s*[A-Z]{2}|$)/gi,
      // "Local - Cidade, UF"
      /([A-Za-z√Ä-√ø0-9\s\-\.]+?)\s*[-‚Äì‚Äî]\s*[A-Za-z√Ä-√ø\s]+,\s*[A-Z]{2}/gi
    ];
    
    for (const padrao of padroesLocal) {
      const match = descricao.match(padrao);
      if (match && match[1]) {
        const local = match[1].trim();
        if (local.length > 3 && local.length < 80) {
          return local;
        }
      }
    }
    
    // Se n√£o encontrou padr√£o espec√≠fico, retornar primeiras palavras da descri√ß√£o
    const palavras = descricao.split(/\s+/).slice(0, 8).join(' ');
    if (palavras.length > 10 && palavras.length < 60) {
      return palavras.trim();
    }
    
    return '';
  }

  // Extrair cidade da descri√ß√£o
  extrairCidadeDaDescricao(descricao) {
    if (!descricao) return '';
    
    // Padr√µes para encontrar cidade/UF
    const padroesCidade = [
      /[-‚Äì‚Äî]\s*([A-Za-z√Ä-√ø\s]+),\s*([A-Z]{2})/gi,
      /,\s*([A-Za-z√Ä-√ø\s]+),\s*([A-Z]{2})/gi,
      /\s+em\s+([A-Za-z√Ä-√ø\s]+),\s*([A-Z]{2})/gi,
      /([A-Za-z√Ä-√ø\s]+),\s*([A-Z]{2})/gi
    ];
    
    for (const padrao of padroesCidade) {
      const match = descricao.match(padrao);
      if (match && match[1] && match[2]) {
        const cidade = match[1].trim();
        const uf = match[2].trim();
        if (cidade.length > 2 && uf.length === 2) {
          return `${cidade}, ${uf}`;
        }
      }
    }
    
    return '';
  }

  // Remover cidade do local espec√≠fico (vers√£o simplificada)
  removerCidadeDoLocal(local, cidadeUF) {
    if (!local || !cidadeUF) return local;
    
    // Extrair cidade da cidadeUF
    const cidade = cidadeUF.split(',')[0]?.trim();
    if (!cidade) return local;
    
    // Apenas remover se o local termina com a cidade
    const cidadeRegex = new RegExp(`\\s*[-‚Äì‚Äî]\\s*${cidade.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}$`, 'gi');
    let localLimpo = local.replace(cidadeRegex, '').trim();
    
    return localLimpo || local;
  }

  // Determinar cidade/UF baseado no nome da cidade
  determinarCidadeUF(cidadeNome) {
    if (!cidadeNome) return '';
    
    const cidadeLower = cidadeNome.toLowerCase();
    
    // Mapeamento de cidades para UF
    const cidadesUF = {
      // Rond√¥nia
      'ji-paran√°': 'RO', 'porto velho': 'RO', 'ariquemes': 'RO', 'cacoal': 'RO',
      'vilhena': 'RO', 'rolim de moura': 'RO', 'jaru': 'RO', 'ouro preto do oeste': 'RO',
      'guajar√°-mirim': 'RO', 'pimenta bueno': 'RO', 'presidente m√©dici': 'RO',
      'candeias do jamari': 'RO', 'espig√£o do oeste': 'RO', 'alta floresta do oeste': 'RO',
      
      // Outras capitais e cidades importantes
      's√£o paulo': 'SP', 'rio de janeiro': 'RJ', 'bras√≠lia': 'DF', 'salvador': 'BA',
      'fortaleza': 'CE', 'belo horizonte': 'MG', 'manaus': 'AM', 'curitiba': 'PR',
      'recife': 'PE', 'goi√¢nia': 'GO', 'bel√©m': 'PA', 'porto alegre': 'RS',
      'guarulhos': 'SP', 'campinas': 'SP', 's√£o lu√≠s': 'MA', 's√£o gon√ßalo': 'RJ',
      'macei√≥': 'AL', 'duque de caxias': 'RJ', 'natal': 'RN', 'teresina': 'PI',
      'florian√≥polis': 'SC', 'vit√≥ria': 'ES', 'palmas': 'TO', 'macap√°': 'AP',
      'rio branco': 'AC', 'boa vista': 'RR', 'jo√£o pessoa': 'PB', 'aracaju': 'SE',
      'cuiab√°': 'MT', 'campo grande': 'MS'
    };
    
    for (const [cidade, uf] of Object.entries(cidadesUF)) {
      if (cidadeLower.includes(cidade)) {
        return `${cidadeNome}, ${uf}`;
      }
    }
    
    // Se n√£o encontrou, retornar apenas a cidade
    return cidadeNome;
  }

  // Construir local completo (m√©todo legado - mantido para compatibilidade)
  construirLocal(venue, cidade, locationOriginal, cidadeOriginal) {
    let local = '';
    
    if (venue) {
      local += venue;
    }
    
    if (cidade) {
      if (local) local += ' - ';
      local += cidade;
    } else if (locationOriginal) {
      if (local) local += ' - ';
      local += locationOriginal;
    } else if (cidadeOriginal) {
      if (local) local += ' - ';
      // Determinar estado correto baseado na cidade
      let estado = 'SP'; // padr√£o
      const cidadeLower = cidadeOriginal.toLowerCase();
      
      // Estados brasileiros por cidade
      if (cidadeLower.includes('ji-paran√°') || cidadeLower.includes('porto velho') || 
          cidadeLower.includes('ariquemes') || cidadeLower.includes('cacoal') || 
          cidadeLower.includes('vilhena') || cidadeLower.includes('rolim de moura') ||
          cidadeLower.includes('jaru') || cidadeLower.includes('ouro preto do oeste') ||
          cidadeLower.includes('guajar√°-mirim') || cidadeLower.includes('pimenta bueno')) {
        estado = 'RO';
      } else if (cidadeLower.includes('salvador')) {
        estado = 'BA';
      } else if (cidadeLower.includes('fortaleza')) {
        estado = 'CE';
      } else if (cidadeLower.includes('goi√¢nia')) {
        estado = 'GO';
      } else if (cidadeLower.includes('porto alegre')) {
        estado = 'RS';
      } else if (cidadeLower.includes('macei√≥')) {
        estado = 'AL';
      } else if (cidadeLower.includes('bras√≠lia')) {
        estado = 'DF';
      } else if (cidadeLower.includes('belo horizonte')) {
        estado = 'MG';
      } else if (cidadeLower.includes('natal')) {
        estado = 'RN';
      } else if (cidadeLower.includes('rio de janeiro')) {
        estado = 'RJ';
      } else if (cidadeLower.includes('s√£o lu√≠s')) {
        estado = 'MA';
      } else if (cidadeLower.includes('manaus')) {
        estado = 'AM';
      } else if (cidadeLower.includes('curitiba')) {
        estado = 'PR';
      } else if (cidadeLower.includes('recife')) {
        estado = 'PE';
      } else if (cidadeLower.includes('bel√©m')) {
        estado = 'PA';
      } else if (cidadeLower.includes('teresina')) {
        estado = 'PI';
      } else if (cidadeLower.includes('jo√£o pessoa')) {
        estado = 'PB';
      } else if (cidadeLower.includes('aracaju')) {
        estado = 'SE';
      } else if (cidadeLower.includes('cuiab√°')) {
        estado = 'MT';
      } else if (cidadeLower.includes('campo grande')) {
        estado = 'MS';
      } else if (cidadeLower.includes('florian√≥polis')) {
        estado = 'SC';
      } else if (cidadeLower.includes('vit√≥ria')) {
        estado = 'ES';
      } else if (cidadeLower.includes('palmas')) {
        estado = 'TO';
      } else if (cidadeLower.includes('macap√°')) {
        estado = 'AP';
      } else if (cidadeLower.includes('rio branco')) {
        estado = 'AC';
      }
      
      local += `${cidadeOriginal}, ${estado}`;
    } else {
      if (local) local += ' - ';
      local += 'Local a definir';
    }
    
    return local;
  }

  // Processar data do evento (com corre√ß√£o de fuso hor√°rio)
  processarDataEvento(dataEvento) {
    // Tentar usar a data fornecida
    if (dataEvento) {
      try {
        // Se √© uma string em portugu√™s, converter
        if (typeof dataEvento === 'string' && dataEvento.includes('de')) {
          const dataProcessada = this.converterDataPortugues(dataEvento);
          if (dataProcessada) {
            return dataProcessada;
          }
        }
        
        // Se √© uma data v√°lida, usar diretamente sem ajuste de fuso hor√°rio
        const parsedDate = new Date(dataEvento);
        if (!isNaN(parsedDate.getTime())) {
          // Retornar apenas a data (YYYY-MM-DD) sem ajuste de fuso hor√°rio
          return parsedDate.toISOString().split('T')[0];
        }
      } catch (e) {
        console.log(`Erro ao processar data: ${dataEvento}`);
      }
    }

    // Usar data futura padr√£o (pr√≥ximo m√™s)
    const agora = new Date();
    agora.setMonth(agora.getMonth() + 1);
    return agora.toISOString().split('T')[0];
  }

  // Converter data em portugu√™s para formato ISO
  converterDataPortugues(dataTexto) {
    if (!dataTexto) return null;

    const meses = {
      'jan': '01', 'janeiro': '01',
      'fev': '02', 'fevereiro': '02',
      'mar': '03', 'mar√ßo': '03',
      'abr': '04', 'abril': '04',
      'mai': '05', 'maio': '05',
      'jun': '06', 'junho': '06',
      'jul': '07', 'julho': '07',
      'ago': '08', 'agosto': '08',
      'set': '09', 'setembro': '09',
      'out': '10', 'outubro': '10',
      'nov': '11', 'novembro': '11',
      'dez': '12', 'dezembro': '12'
    };

    // Padr√£o: "30 de nov", "17 de Ago", etc.
    const match = dataTexto.match(/(\d{1,2})\s*de\s*(\w+)/i);
    if (match) {
      const dia = match[1].padStart(2, '0');
      const mesTexto = match[2].toLowerCase();
      const mes = meses[mesTexto] || meses[mesTexto.substring(0, 3)];
      
      if (mes) {
        const anoAtual = new Date().getFullYear();
        const mesAtual = new Date().getMonth() + 1;
        const diaAtual = new Date().getDate();
        
        // Determinar o ano correto
        let ano = anoAtual;
        
        // Se o m√™s √© menor que o atual, ou se √© o mesmo m√™s mas o dia j√° passou, usar pr√≥ximo ano
        if (parseInt(mes) < mesAtual || 
           (parseInt(mes) === mesAtual && parseInt(dia) < diaAtual)) {
          ano = anoAtual + 1;
        }
        
        return `${ano}-${mes}-${dia}`;
      }
    }

    // Padr√£o: "17/08/2024" ou "17/08"
    const matchNumerico = dataTexto.match(/(\d{1,2})\/(\d{1,2})(?:\/(\d{4}))?/);
    if (matchNumerico) {
      const dia = matchNumerico[1].padStart(2, '0');
      const mes = matchNumerico[2].padStart(2, '0');
      const ano = matchNumerico[3] || new Date().getFullYear();
      
      return `${ano}-${mes}-${dia}`;
    }

    return null;
  }

  // Calcular similaridade entre dois textos (algoritmo de Levenshtein simplificado)
  calcularSimilaridade(str1, str2) {
    const s1 = str1.toLowerCase().trim();
    const s2 = str2.toLowerCase().trim();
    
    if (s1 === s2) return 1;
    
    const len1 = s1.length;
    const len2 = s2.length;
    
    if (len1 === 0) return len2 === 0 ? 1 : 0;
    if (len2 === 0) return 0;
    
    // Matriz de dist√¢ncia
    const matrix = Array(len2 + 1).fill(null).map(() => Array(len1 + 1).fill(null));
    
    for (let i = 0; i <= len1; i++) matrix[0][i] = i;
    for (let j = 0; j <= len2; j++) matrix[j][0] = j;
    
    for (let j = 1; j <= len2; j++) {
      for (let i = 1; i <= len1; i++) {
        const cost = s1[i - 1] === s2[j - 1] ? 0 : 1;
        matrix[j][i] = Math.min(
          matrix[j - 1][i] + 1,     // deletion
          matrix[j][i - 1] + 1,     // insertion
          matrix[j - 1][i - 1] + cost // substitution
        );
      }
    }
    
    const distance = matrix[len2][len1];
    const maxLen = Math.max(len1, len2);
    
    return (maxLen - distance) / maxLen;
  }

  // Categorizar evento baseado no t√≠tulo
  categorizarEvento(titulo) {
    const tituloLower = titulo.toLowerCase();
    
    if (tituloLower.includes('show') || tituloLower.includes('m√∫sica') || tituloLower.includes('concert')) {
      return 'M√∫sica';
    } else if (tituloLower.includes('teatro') || tituloLower.includes('pe√ßa')) {
      return 'Teatro';
    } else if (tituloLower.includes('workshop') || tituloLower.includes('curso') || tituloLower.includes('palestra')) {
      return 'Educa√ß√£o';
    } else if (tituloLower.includes('festa') || tituloLower.includes('balada')) {
      return 'Festa';
    } else if (tituloLower.includes('esporte') || tituloLower.includes('corrida') || tituloLower.includes('marathon')) {
      return 'Esporte';
    } else if (tituloLower.includes('congresso') || tituloLower.includes('confer√™ncia')) {
      return 'Neg√≥cios';
    } else {
      return 'Geral';
    }
  }

  // Verificar se t√≠tulo √© muito gen√©rico
  isTituloMuitoGenerico(titulo) {
    const tituloLower = titulo.toLowerCase();
    const genericos = [
      'evento', 'show', 'festa', 'encontro', 'apresenta√ß√£o',
      'workshop', 'curso', 'palestra', 'semin√°rio', 'confer√™ncia'
    ];
    
    return genericos.some(generico => tituloLower.includes(generico)) && titulo.length < 20;
  }

  // Extrair informa√ß√µes √∫teis da descri√ß√£o
  extrairInformacoesDaDescricao(descricao) {
    if (!descricao) return null;
    
    // Procurar por artistas, bandas, nomes de pessoas
    const artistas = descricao.match(/\b([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)\b/g);
    if (artistas && artistas.length > 0) {
      const artista = artistas[0];
      if (artista.length > 3 && artista.length < 30) {
        return artista;
      }
    }
    
    // Procurar por tipos de evento espec√≠ficos
    const tipos = ['show', 'festival', 'workshop', 'curso', 'palestra', 'semin√°rio'];
    for (const tipo of tipos) {
      if (descricao.toLowerCase().includes(tipo)) {
        return tipo.toUpperCase();
      }
    }
    
    return null;
  }
}

async function scrapeEventosCompleto() {
  console.log(chalk.cyan('\nüé´ Sistema Completo de Scraping de Eventos'));
  console.log(chalk.cyan('‚ïê'.repeat(50)));
  console.log(chalk.gray('M√∫ltiplas fontes + Imagens + Eventos Regionais\n'));

  // Debug: verificar se as vari√°veis de ambiente est√£o carregadas
  console.log(chalk.yellow('üîß Verificando configura√ß√µes...'));
  console.log(chalk.gray(`SUPABASE_URL: ${process.env.SUPABASE_URL ? '‚úÖ Configurado' : '‚ùå N√£o encontrado'}`));
  console.log(chalk.gray(`SUPABASE_ANON_KEY: ${process.env.SUPABASE_ANON_KEY ? '‚úÖ Configurado' : '‚ùå N√£o encontrado'}`));

  if (!process.env.SUPABASE_URL || !process.env.SUPABASE_ANON_KEY) {
    console.log(chalk.red('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas!'));
    console.log(chalk.yellow('Verifique se o arquivo .env.local existe em scripts/scraping/'));
    rl.close();
    return;
  }

  const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_ANON_KEY
  );

  try {
    // 1. Autentica√ß√£o
    console.log(chalk.yellow('üîê Autentica√ß√£o necess√°ria'));
    
    const email = await question('Email: ');
    const password = await question('Senha: ');
    
    console.log(chalk.gray('Tentando autenticar...'));
    
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: email,
      password: password
    });

    if (authError) {
      console.log(chalk.red(`‚ùå Erro de autentica√ß√£o: ${authError.message}`));
      console.log(chalk.yellow('Verifique suas credenciais e conex√£o com a internet'));
      rl.close();
      return;
    }

    console.log(chalk.green(`‚úÖ Login realizado! Usu√°rio: ${authData.user.email}`));

    // 2. Menu de op√ß√µes de scraping
    console.log(chalk.cyan('\nüìç Escolha a configura√ß√£o de scraping:'));
    console.log(chalk.white('1Ô∏è‚É£  Apenas Rond√¥nia (padr√£o)'));
    console.log(chalk.white('2Ô∏è‚É£  Rond√¥nia + Todas as capitais brasileiras'));
    console.log(chalk.white('3Ô∏è‚É£  Rond√¥nia + Capitais principais (SP, MG, BA, RJ, RS, DF, PR, PE, SC, CE, GO)'));
    
    const opcao = await question('\nDigite sua op√ß√£o (1, 2 ou 3): ');
    
    let tipoConfig = 'rondonia';
    let descricaoConfig = 'Apenas Rond√¥nia';
    
    switch (opcao.trim()) {
      case '2':
        tipoConfig = 'rondonia_todas_capitais';
        descricaoConfig = 'Rond√¥nia + Todas as capitais';
        break;
      case '3':
        tipoConfig = 'rondonia_capitais_principais';
        descricaoConfig = 'Rond√¥nia + Capitais principais';
        break;
      default:
        tipoConfig = 'rondonia';
        descricaoConfig = 'Apenas Rond√¥nia';
        break;
    }
    
    console.log(chalk.green(`\n‚úÖ Configura√ß√£o selecionada: ${descricaoConfig}`));

    // 3. Inicializar scraper
    const scraper = new EventoScraperCompleto(supabase, authData.user.id);
    await scraper.initialize();

    // 4. Buscar eventos de m√∫ltiplas fontes
    console.log(chalk.cyan('\nüîç Buscando eventos de m√∫ltiplas fontes...'));
    
    const [symplaEventos, eventbriteEventos, regionaisEventos] = await Promise.all([
      scraper.scrapeSymplaRegional(tipoConfig),
      scraper.scrapeEventbriteRegional(tipoConfig),
      scraper.scrapeEventosRegionaisRO()
    ]);

    const todosEventos = [...symplaEventos, ...eventbriteEventos, ...regionaisEventos];
    
    console.log(chalk.blue(`\nüìä Total encontrado: ${todosEventos.length} eventos`));
    console.log(chalk.gray(`  ‚Ä¢ Sympla: ${symplaEventos.length}`));
    console.log(chalk.gray(`  ‚Ä¢ Eventbrite: ${eventbriteEventos.length}`));
    console.log(chalk.gray(`  ‚Ä¢ Sites regionais: ${regionaisEventos.length}`));

    // 4. Salvar eventos
    console.log(chalk.yellow('\nüíæ Salvando eventos...'));
    
    let salvos = 0;
    let comImagem = 0;
    let regionais = 0;

    for (const evento of todosEventos) {
      try {
        const result = await scraper.salvarEvento(evento);
        
        if (result.action === 'created') {
          salvos++;
          
          if (evento.image) comImagem++;
          if (evento.cidade && (evento.cidade.includes('Ji-Paran√°') || evento.cidade.includes('RO'))) {
            regionais++;
          }
          
          const hasImage = evento.image ? 'üñºÔ∏è' : 'üìÑ';
          const isRegional = evento.cidade?.includes('RO') ? 'üèòÔ∏è' : 'üèôÔ∏è';
          
          console.log(chalk.green(`‚úÖ ${hasImage}${isRegional} ${evento.title.substring(0, 45)}...`));
        } else {
          console.log(chalk.yellow(`‚è≠Ô∏è  ${evento.title.substring(0, 45)}... (j√° existe)`));
        }
      } catch (error) {
        console.log(chalk.red(`‚ùå ${evento.title.substring(0, 30)}...: ${error.message}`));
      }
    }

    // 5. Mostrar resultados
    console.log(chalk.cyan('\nüìä Resultados Finais:'));
    console.log(chalk.cyan('‚ïê'.repeat(25)));
    console.log(chalk.green(`‚úÖ Eventos salvos: ${salvos}`));
    console.log(chalk.blue(`üñºÔ∏è Com imagem: ${comImagem}`));
    console.log(chalk.blue(`üèòÔ∏è Regionais (RO): ${regionais}`));

    // 6. Estat√≠sticas da tabela
    try {
      const { count } = await supabase
        .from('eventos')
        .select('*', { count: 'exact', head: true });

      console.log(chalk.blue(`üìä Total na tabela: ${count} eventos`));
    } catch (error) {
      console.log(chalk.yellow('‚ö†Ô∏è  N√£o foi poss√≠vel obter estat√≠sticas'));
    }

    // 7. Cleanup
    await scraper.cleanup();
    await supabase.auth.signOut();
    
    if (salvos > 0) {
      console.log(chalk.green('\nüéâ SUCESSO! Sistema completo funcionando!'));
      console.log(chalk.gray('Eventos de m√∫ltiplas fontes com imagens e foco regional.'));
    }

  } catch (error) {
    console.error(chalk.red('\n‚ùå Erro no sistema:'), error.message);
  } finally {
    rl.close();
  }
}

if (require.main === module) {
  scrapeEventosCompleto().catch(error => {
    console.error(chalk.red('Erro fatal:'), error);
    process.exit(1);
  });
}

module.exports = { EventoScraperCompleto, scrapeEventosCompleto };