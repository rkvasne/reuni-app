#!/usr/bin/env node

/**
 * Script para verificar se a migra√ß√£o de renomea√ß√£o foi executada corretamente
 * 
 * Uso:
 * node scripts/verify-migration.js
 */

const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente necess√°rias n√£o encontradas:');
  console.error('   - NEXT_PUBLIC_SUPABASE_URL');
  console.error('   - SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function verifyMigration() {
  try {
    console.log('üîç Verificando migra√ß√£o de renomea√ß√£o dos campos...');
    console.log('');

    // Verificar estrutura atual da tabela eventos
    const { data: columns, error: columnsError } = await supabase
      .from('information_schema.columns')
      .select('column_name, data_type, is_nullable')
      .eq('table_name', 'eventos')
      .order('ordinal_position');

    if (columnsError) {
      console.error('‚ùå Erro ao verificar estrutura:', columnsError);
      process.exit(1);
    }

    console.log('üìä Estrutura atual da tabela eventos:');
    console.log('');

    const expectedFields = {
      'local': { found: false, oldName: 'descricao' },
      'cidade': { found: false, oldName: 'local' }
    };

    columns.forEach(col => {
      const status = col.column_name === 'local' || col.column_name === 'cidade' ? 'üü¢' : '‚ö™';
      console.log(`${status} ${col.column_name}: ${col.data_type} ${col.is_nullable === 'YES' ? '(nullable)' : '(NOT NULL)'}`);
      
      if (col.column_name === 'local') {
        expectedFields.local.found = true;
      }
      if (col.column_name === 'cidade') {
        expectedFields.cidade.found = true;
      }
    });

    console.log('');
    console.log('üîç Verifica√ß√£o dos campos renomeados:');

    // Verificar se os campos antigos ainda existem
    const oldFields = columns.filter(col => col.column_name === 'descricao' || col.column_name === 'local');
    
    if (oldFields.length > 0) {
      console.log('‚ùå Campos antigos ainda existem:');
      oldFields.forEach(field => {
        console.log(`   - ${field.column_name} (deveria ter sido renomeado)`);
      });
    } else {
      console.log('‚úÖ Campos antigos foram renomeados corretamente');
    }

    // Verificar se os novos campos existem
    console.log('');
    if (expectedFields.local.found) {
      console.log('‚úÖ Campo "local" existe (antigo descricao)');
    } else {
      console.log('‚ùå Campo "local" N√ÉO existe');
    }

    if (expectedFields.cidade.found) {
      console.log('‚úÖ Campo "cidade" existe (antigo local)');
    } else {
      console.log('‚ùå Campo "cidade" N√ÉO existe');
    }

    // Verificar dados de exemplo
    console.log('');
    console.log('üìã Verificando dados de exemplo...');
    
    const { data: sampleEvents, error: sampleError } = await supabase
      .from('eventos')
      .select('id, titulo, local, cidade')
      .limit(3);

    if (sampleError) {
      console.error('‚ùå Erro ao buscar dados de exemplo:', sampleError);
    } else if (sampleEvents && sampleEvents.length > 0) {
      console.log('‚úÖ Dados encontrados com os novos campos:');
      sampleEvents.forEach((event, index) => {
        console.log(`   Evento ${index + 1}:`);
        console.log(`     - ID: ${event.id}`);
        console.log(`     - T√≠tulo: ${event.titulo}`);
        console.log(`     - Local: ${event.local || 'N/A'}`);
        console.log(`     - Cidade: ${event.cidade || 'N/A'}`);
      });
    } else {
      console.log('‚ÑπÔ∏è  Nenhum evento encontrado para verifica√ß√£o');
    }

    // Resumo final
    console.log('');
    console.log('üìã Resumo da verifica√ß√£o:');
    
    const allGood = expectedFields.local.found && expectedFields.cidade.found && oldFields.length === 0;
    
    if (allGood) {
      console.log('üéâ Migra√ß√£o executada com SUCESSO!');
      console.log('‚úÖ Todos os campos foram renomeados corretamente');
      console.log('‚úÖ Dados est√£o acess√≠veis com os novos nomes');
      console.log('');
      console.log('‚ö†Ô∏è  Lembre-se de atualizar o c√≥digo da aplica√ß√£o!');
    } else {
      console.log('‚ùå Migra√ß√£o INCOMPLETA ou com problemas');
      console.log('üîß Verifique os erros acima e execute a migra√ß√£o novamente');
      process.exit(1);
    }

  } catch (error) {
    console.error('‚ùå Erro inesperado:', error);
    process.exit(1);
  }
}

// Executar verifica√ß√£o
verifyMigration(); 