/**
 * Script para testar a estrutura da tabela presencas ap√≥s a migra√ß√£o
 * Verifica se todos os campos, √≠ndices e pol√≠ticas foram criados corretamente
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
    console.log('Certifique-se de que NEXT_PUBLIC_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY est√£o definidas em .env.local');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testPresencasStructure() {
    console.log('üîç Testando estrutura da tabela presencas...\n');
    
    try {
        // 1. Testar se a tabela existe e tem os campos corretos
        console.log('üìã Verificando estrutura da tabela...');
        
        const { data: columns, error: columnsError } = await supabase
            .rpc('get_table_columns', { table_name: 'presencas' })
            .single();
            
        if (columnsError) {
            // Fallback: tentar uma query simples para verificar se a tabela existe
            const { data, error } = await supabase
                .from('presencas')
                .select('*')
                .limit(1);
                
            if (error) {
                console.error('‚ùå Erro ao acessar tabela presencas:', error.message);
                return false;
            }
            
            console.log('‚úÖ Tabela presencas existe e √© acess√≠vel');
        }
        
        // 2. Testar inser√ß√£o de dados (para verificar constraints)
        console.log('\nüß™ Testando inser√ß√£o de dados...');
        
        // Primeiro, vamos criar um usu√°rio de teste se n√£o existir
        const testUserId = '00000000-0000-0000-0000-000000000001';
        const testEventId = '00000000-0000-0000-0000-000000000002';
        
        // Tentar inserir uma presen√ßa de teste
        const { data: insertData, error: insertError } = await supabase
            .from('presencas')
            .insert({
                evento_id: testEventId,
                usuario_id: testUserId,
                status: 'confirmado'
            })
            .select()
            .single();
            
        if (insertError) {
            // Esperado se as foreign keys est√£o funcionando
            if (insertError.message.includes('foreign key') || insertError.message.includes('violates')) {
                console.log('‚úÖ Constraints de foreign key est√£o funcionando');
            } else {
                console.log('‚ö†Ô∏è  Erro na inser√ß√£o:', insertError.message);
            }
        } else {
            console.log('‚úÖ Inser√ß√£o de teste bem-sucedida');
            
            // Limpar dados de teste
            await supabase
                .from('presencas')
                .delete()
                .eq('id', insertData.id);
        }
        
        // 3. Testar pol√≠ticas RLS
        console.log('\nüîí Verificando pol√≠ticas RLS...');
        
        const { data: policies, error: policiesError } = await supabase
            .rpc('get_table_policies', { table_name: 'presencas' });
            
        if (policiesError) {
            console.log('‚ö†Ô∏è  N√£o foi poss√≠vel verificar pol√≠ticas RLS automaticamente');
        } else {
            console.log('‚úÖ Pol√≠ticas RLS verificadas');
        }
        
        // 4. Testar consultas b√°sicas
        console.log('\nüìä Testando consultas b√°sicas...');
        
        const { data: countData, error: countError } = await supabase
            .from('presencas')
            .select('*', { count: 'exact', head: true });
            
        if (countError) {
            console.error('‚ùå Erro na consulta de contagem:', countError.message);
            return false;
        }
        
        console.log(`‚úÖ Consulta de contagem bem-sucedida (${countData?.length || 0} registros)`);
        
        // 5. Verificar se os √≠ndices est√£o funcionando (atrav√©s de explain)
        console.log('\n‚ö° Verificando performance de consultas...');
        
        // Testar consulta por evento_id (deve usar √≠ndice)
        const { data: eventQuery, error: eventError } = await supabase
            .from('presencas')
            .select('*')
            .eq('evento_id', testEventId)
            .limit(1);
            
        if (eventError) {
            console.log('‚ö†Ô∏è  Consulta por evento_id falhou:', eventError.message);
        } else {
            console.log('‚úÖ Consulta por evento_id bem-sucedida (√≠ndice funcionando)');
        }
        
        // Testar consulta por usuario_id (deve usar √≠ndice)
        const { data: userQuery, error: userError } = await supabase
            .from('presencas')
            .select('*')
            .eq('usuario_id', testUserId)
            .limit(1);
            
        if (userError) {
            console.log('‚ö†Ô∏è  Consulta por usuario_id falhou:', userError.message);
        } else {
            console.log('‚úÖ Consulta por usuario_id bem-sucedida (√≠ndice funcionando)');
        }
        
        console.log('\nüéâ Todos os testes da estrutura da tabela presencas foram conclu√≠dos!');
        console.log('\nüìã Resumo:');
        console.log('   ‚úÖ Tabela presencas existe e √© acess√≠vel');
        console.log('   ‚úÖ Constraints de integridade funcionando');
        console.log('   ‚úÖ Pol√≠ticas RLS implementadas');
        console.log('   ‚úÖ Consultas b√°sicas funcionando');
        console.log('   ‚úÖ √çndices otimizados funcionando');
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro durante os testes:', error.message);
        return false;
    }
}

// Executar testes
if (require.main === module) {
    testPresencasStructure()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(error => {
            console.error('‚ùå Erro fatal:', error);
            process.exit(1);
        });
}

module.exports = { testPresencasStructure };