[
  {
    "schemaname": "public",
    "tablename": "comentarios",
    "policyname": "Manage own comments",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "ALL",
    "qual": "(usuario_id = auth.uid())",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "comentarios_post_comunidade",
    "policyname": "comentarios_post_insert_community_members",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "((auth.uid() = usuario_id) AND (auth.uid() IN ( SELECT mc.usuario_id\n   FROM (membros_comunidade mc\n     JOIN posts_comunidade pc ON ((mc.comunidade_id = pc.comunidade_id)))\n  WHERE (pc.id = comentarios_post_comunidade.post_id))))"
  },
  {
    "schemaname": "public",
    "tablename": "comentarios_post_comunidade",
    "policyname": "comentarios_post_select_community_members",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(auth.uid() IN ( SELECT mc.usuario_id\n   FROM (membros_comunidade mc\n     JOIN posts_comunidade pc ON ((mc.comunidade_id = pc.comunidade_id)))\n  WHERE (pc.id = comentarios_post_comunidade.post_id)))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "comunidades",
    "policyname": "comunidades_delete_owner",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "DELETE",
    "qual": "(auth.uid() = criador_id)",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "comunidades",
    "policyname": "comunidades_insert_authenticated",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(auth.uid() = criador_id)"
  },
  {
    "schemaname": "public",
    "tablename": "comunidades",
    "policyname": "comunidades_select_public_or_member",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "((NOT privada) OR (criador_id = auth.uid()) OR (auth.uid() IN ( SELECT membros_comunidade.usuario_id\n   FROM membros_comunidade\n  WHERE (membros_comunidade.comunidade_id = comunidades.id))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "comunidades",
    "policyname": "comunidades_update_admin",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "UPDATE",
    "qual": "((auth.uid() = criador_id) OR (auth.uid() IN ( SELECT membros_comunidade.usuario_id\n   FROM membros_comunidade\n  WHERE ((membros_comunidade.comunidade_id = comunidades.id) AND ((membros_comunidade.papel)::text = ANY ((ARRAY['admin'::character varying, 'moderador'::character varying])::text[]))))))",
    "with_check": "((auth.uid() = criador_id) OR (auth.uid() IN ( SELECT membros_comunidade.usuario_id\n   FROM membros_comunidade\n  WHERE ((membros_comunidade.comunidade_id = comunidades.id) AND ((membros_comunidade.papel)::text = ANY ((ARRAY['admin'::character varying, 'moderador'::character varying])::text[]))))))"
  },
  {
    "schemaname": "public",
    "tablename": "curtidas_evento",
    "policyname": "curtidas_delete_own",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "DELETE",
    "qual": "(auth.uid() = usuario_id)",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "curtidas_evento",
    "policyname": "curtidas_insert_own",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(auth.uid() = usuario_id)"
  },
  {
    "schemaname": "public",
    "tablename": "curtidas_evento",
    "policyname": "curtidas_select_all",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "true",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "eventos",
    "policyname": "Manage own events",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "ALL",
    "qual": "(organizador_id = auth.uid())",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "eventos",
    "policyname": "Users can delete own events",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "DELETE",
    "qual": "(organizador_id = auth.uid())",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "eventos",
    "policyname": "Users can create events",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(auth.uid() IS NOT NULL)"
  },
  {
    "schemaname": "public",
    "tablename": "eventos",
    "policyname": "Events are viewable by everyone",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "true",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "eventos",
    "policyname": "View public events",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "true",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "eventos",
    "policyname": "Users can update own events",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "UPDATE",
    "qual": "(organizador_id = auth.uid())",
    "with_check": "(organizador_id = auth.uid())"
  },
  {
    "schemaname": "public",
    "tablename": "membros_comunidade",
    "policyname": "Manage own membership",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "ALL",
    "qual": "(usuario_id = auth.uid())",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "participacoes",
    "policyname": "Manage own participations",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "ALL",
    "qual": "(usuario_id = auth.uid())",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "posts_comunidade",
    "policyname": "posts_insert_community_members",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "((auth.uid() = usuario_id) AND (auth.uid() IN ( SELECT mc.usuario_id\n   FROM membros_comunidade mc\n  WHERE (mc.comunidade_id = posts_comunidade.comunidade_id))))"
  },
  {
    "schemaname": "public",
    "tablename": "posts_comunidade",
    "policyname": "posts_select_community_members",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(auth.uid() IN ( SELECT mc.usuario_id\n   FROM membros_comunidade mc\n  WHERE (mc.comunidade_id = posts_comunidade.comunidade_id)))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "presencas",
    "policyname": "Manage own presences",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "ALL",
    "qual": "(usuario_id = auth.uid())",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "usuarios",
    "policyname": "usuarios_insert_own",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(auth.uid() = id)"
  },
  {
    "schemaname": "public",
    "tablename": "usuarios",
    "policyname": "usuarios_select_own",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(auth.uid() = id)",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "usuarios",
    "policyname": "usuarios_update_own",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "UPDATE",
    "qual": "(auth.uid() = id)",
    "with_check": "(auth.uid() = id)"
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Users can delete their own avatars",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "DELETE",
    "qual": "((bucket_id = 'avatars'::text) AND (auth.uid() = ((storage.foldername(name))[1])::uuid))",
    "with_check": null
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Users can delete their own community images",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "DELETE",
    "qual": "((bucket_id = 'communities'::text) AND (auth.uid() = ((storage.foldername(name))[1])::uuid))",
    "with_check": null
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Users can delete their own event images",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "DELETE",
    "qual": "((bucket_id = 'events'::text) AND (auth.uid() = ((storage.foldername(name))[1])::uuid))",
    "with_check": null
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Users can delete their own generic images",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "DELETE",
    "qual": "((bucket_id = 'images'::text) AND (auth.uid() = ((storage.foldername(name))[1])::uuid))",
    "with_check": null
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Authenticated users can upload avatars",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(bucket_id = 'avatars'::text)"
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Authenticated users can upload community images",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(bucket_id = 'communities'::text)"
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Authenticated users can upload event images",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(bucket_id = 'events'::text)"
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Authenticated users can upload generic images",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(bucket_id = 'images'::text)"
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Public read access for avatars",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(bucket_id = 'avatars'::text)",
    "with_check": null
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Public read access for communities images",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(bucket_id = 'communities'::text)",
    "with_check": null
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Public read access for events images",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(bucket_id = 'events'::text)",
    "with_check": null
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Public read access for generic images",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(bucket_id = 'images'::text)",
    "with_check": null
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Public read events",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(bucket_id = 'events'::text)",
    "with_check": null
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Users can update their own avatars",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "UPDATE",
    "qual": "((bucket_id = 'avatars'::text) AND (auth.uid() = ((storage.foldername(name))[1])::uuid))",
    "with_check": null
  }
]